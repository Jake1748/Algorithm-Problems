# working solution
# O(nlog(n)) time O(1) space

def sweetAndSavory(dishes, target):
    dishes.sort()

    l = 0
    r = len(dishes) - 1
    res = [0,0]
    close = float('inf')

    while l < r and dishes[l] < 0 and dishes[r] > 0:
        cur = dishes[l] + dishes[r]

        diff = target - cur
        
        if diff < close and cur <= target:
            res[0] = dishes[l]
            res[1] = dishes[r]
            close = diff

        if cur < target:
            l += 1
        elif cur > target:
            r -= 1
        else:
            return res

    return res

# solution in progress

def sweetAndSavory(dishes, target):
    sweet = []
    savory = []
    result = [0,0]

    for val in dishes:
        if val < 0:
            sweet.append(val)
        else:
            savory.append(val)

    sweet.sort(reverse=True)
    savory.sort()

    if len(sweet) == 0 or len(savory) == 0:
        return result

    sweetPointer = 0
    savoryPointer = 0
    sum = sweet[sweetPointer] + savory[savoryPointer]

    if sum > target:
        return [0,0]

    result[0] = sweet[sweetPointer]
    result[1] = savory[savoryPointer]
    
    while savoryPointer < len(savory) and sweetPointer < len(sweet) and sum <= target:
       
        result[0] = sweet[sweetPointer]
        result[1] = savory[savoryPointer]
        
        if sum < target:
            savoryPointer += 1
        elif sum > target:
            sweetPointer += 1
        else:
            break

        sum = result[0] + result[1]


    print(result)
    return result

# solution in progress

def sweetAndSavory(dishes, target):
    sweet = []
    savory = []
    result = [0,0]

    for val in dishes:
        if val < 0:
            sweet.append(val)
        else:
            savory.append(val)

    sweet.sort()
    savory.sort()

    if len(sweet) == 0 or len(savory) == 0:
        return result

    sweetPointer = 0
    savoryPointer = 0

    while savoryPointer < len(savory):
        sum = savory[savoryPointer] + sweet[sweetPointer]
        
        if sum  target:
            return result

# solution in progress

def sweetAndSavory(dishes, target):
    result = [0,0]
    closest = float('-inf')
    
    for val in dishes:
        if val < 0:
            if target + val > closest:
                closest = target + val 
                result[0] = val

    if result[0] == 0:
        return result

    target = closest
    closest = float('inf')
    
    for val in dishes:
        if val > 0:
            if target - val < closest:
                closest = target - val 
                result[1] = val 

    if result[1] == 0:
        return [0,0]

    return result
