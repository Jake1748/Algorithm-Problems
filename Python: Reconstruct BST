# Solution:

# This is an input class. Do not edit.
class BST:
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right


def reconstructBst(arr):
    root = BST(arr[0])
    leftValues = []
    rightValues = []
    for val in arr[1:]:
        if val < root.value:
            leftValues.append( val )
        else:
            rightValues.append( val )

    if len( leftValues ):
        root.left = reconstructBst(leftValues)
        
    if len( rightValues ):
        root.right = reconstructBst(rightValues)

    return root
    
# Second attempt:

# This is an input class. Do not edit.
class BST:
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

def reconstructBst( arr ):
    if len( arr ) == 1:
        return BST(arr[0])

    return addBranch(arr, 0, 1, len( arra ) )

def addBranch( arr, curr = 0, left = None, right = None ):
    # Finds leaf node
    if right - left < 2:
        return BST(arr[curr])

    # find right bound
    for i in range( curr, right ):
        if arr[i] > arr[curr]:
            right = i
            break

    # find left bound
    for i in range(curr, right):
        if arr[i] < arr[curr]:
            left = i
            break

    return BST( arr[curr], addBranch( arr, left, left, right ), addBranch( arr, right, left, right ) )

# This is an input class. Do not edit.
class BST:
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right


def reconstructBst( arr, curr = 0, left = None, right = None ):
    if right - curr < 2:
        return BST(arr[curr])

    # find right bound
    for i in range(curr, right):
        if arr[i] > arr[curr]:
            right = i
            break

    # find left bound
    for i in range(curr, right):
        if arr[i] < arr[curr]:
            left = i
            break

    return BST( arr[curr], reconstructBst( arr, left, left, right ), reconstructBst( arr, right, left, right ) )

# Incomplete:

# This is an input class. Do not edit.
class BST:
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right


def reconstructBst(arr):
    # make a pointer to root
    # make pointer a running prev node
    # make a pointer for a running current node
    # loop thru array
        # use helper method to create new BST with val and attach to running tree
        # adjust running pointers
    # return root pointer

# helper method uses recursion to place the given value into the tree as a node

    rootPointer = BST(arr[0])
    minNode = None
    maxNode = None
    for i in range( 1, len( arr ) ):
        if arr[i] < rootPointer.value:
            addValue(arr[i], rootpointer, minNode, rootPointer)
        else:
            addValue(arr[i], rootpointer, rootPointer, maxNode)
    return rootPointer

def addValue(val, rootpointer, minNode, maxNode):
    newBST = BST( val )
