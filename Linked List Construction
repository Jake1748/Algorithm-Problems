# This is an input class. Do not edit.
class Node:
    def __init__(self, value):
        self.value = value
        self.prev = None
        self.next = None


# Feel free to add new properties and methods to the class.
class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def setHead(self, node):
        if self.head != None:
            self.head.prev = node
            
        node.next = self.head
        self.head = node
    def setTail(self, node):
        if self.tail != None:
            self.tail.next = node

        node.prev = self.tail
        self.tail = node
    def insertBefore(self, node, nodeToInsert):
        # find nodeToInsert
        # find node
        # either node or nodeToinsert are None, stop
        # find the difference between the nodes
        # shift node that many times

        standingNode = self.findNode(node.value)
        standingNodePosition = self.findNodePosition(node.value)
        movingNode = self.findNode(nodeToInsert.value)
        movingNodePosition = self.findNodePosition(nodeToInsert.value)
        
        if standingNode == -1 or movingNode == -1:
            return

        while movingNode.next != standingNode:
            if movingNodePosition < standingNodePosition:
                self.shift(movingNode, movingNode.next)
                movingNodePosition += 1
            elif movingNodePosition > standingNodePosition:
                self.shift(movingNode.prev, movingNode)
                movingNodePosition -= 1
            else:
                print('they are both the same value')
        print('insertBefore completed')

    def insertAfter(self, node, nodeToInsert):
        # Write your code here.
        pass

    def insertAtPosition(self, position, nodeToInsert):
        # Write your code here.
        pass

    def removeNodesWithValue(self, value):
        # Write your code here.
        pass

    def remove(self, node):
        # Write your code here.
        pass

    def containsNodeWithValue(self, value):
        pointer = self.head

        while pointer != None:
            if pointer.value == value:
                return True
            pointer = pointer.next

        return False
    def findNode(self, value):
        pointer = self.head
        
        while pointer != None:
            if pointer.value == value:
                return pointer 
            pointer = pointer.next

        return -1
    def findNodePosition(self, value):
        pointer = self.head
        counter = 1
        
        while pointer != None:
            if pointer.value == value:
                return counter 
            pointer = pointer.next

        return -1
    #create a nextNode method
