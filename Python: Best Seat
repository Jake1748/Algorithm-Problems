# O(n) time and O(1) space

def bestSeat(seats):
    pointer = None
    result = None
    length = 0
    biggestLength = 0
    
    for i in range( 1, len(seats) ):
        seat = seats[i]

        if seat == 1:
            if length > biggestLength:
                biggestLength = length
                result = pointer
                
            length = 0
            pointer = None
        else:
            length += 1
            if length == 1:
                pointer = i
            elif length % 2 == 1:
                pointer += 1
            else:
                continue
        
    return result if result != None else -1

# O(n) time and O(n) space

def bestSeat(seats):
    currentLongest = []
    longest = []
    
    for i in range( 1, len(seats) ):
        seat = seats[i]

        if seat == 1 or i == len(seats) - 1:
            if len(currentLongest) > len(longest):
                longest = currentLongest
                currentLongest = []
            else:
                currentLongest = []
        else:
            currentLongest.append(i)

    halfPoint = int( len(longest) / 2 )
    if len(longest) % 2 == 0:
        halfPoint -= 1
        
    return longest[ halfPoint ] if len(longest) != 0 else -1
