Prompt:
Write a function that, given a string, returns its longest palindromic substring.

Current Answer:

def longestPalindromicSubstring(string):
    resultIndexes = [0,0]
    leftPointer = 0
    rightPointer = 2
    
    for i in range( 1, len( string ) ):
        leftPointer = i - 1
        rightPointer = i + 1

        # checking for odd length strings
        while( leftPointer >= 0 and rightPointer < len( string ) and string[ leftPointer ] == string[ rightPointer ] ):
            leftPointer -= 1
            rightPointer += 1
        
        rightPointer -= 1
        leftPointer += 1
            
        if abs( rightPointer - leftPointer ) > abs( resultIndexes[ 1 ] - resultIndexes[ 0 ] ):
            resultIndexes[ 0 ] = leftPointer
            resultIndexes[ 1 ] = rightPointer

        # checking for even length strings
        leftPointer = i - 1
        rightPointer = i

        while( rightPointer < len( string ) and string[ leftPointer ] == string[ rightPointer ] ):
        

    return string[ leftPointer : rightPointer + 1 ]
