# Working solution
# Runs O(n) time and O(1) space
# This question asks for a solution that converts a base 26 nuber to a base 10 number

class Solution:
    def titleToNumber(self, columnTitle: str) -> int:
        # repository of letters
        # make count
        # loop through title and add the associated number to a count

        hash = {}
        letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

        for i, let in enumerate(letters):
            hash[let] = i + 1

        result, pos = 0 , 0

        for let in reversed( columnTitle ):
            digit = hash[let]
            result += digit * 26**pos
            pos += 1
        
        return result

# Current iterative solution in progress

class Solution:
    def titleToNumber(self, columnTitle: str) -> int:
        # repository of letters
        # make count
        # loop through title and add the associated number to a count

        hash = {}
        letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

        for i, let in enumerate(letters):
            hash[let] = i + 1

        count = hash[ columnTitle[-1] ]

        for i in range( len(columnTitle) - 1 ):
            char = columnTitle[i]
            print(char, hash[char])
            count += hash[char] * 26
        
        return count
