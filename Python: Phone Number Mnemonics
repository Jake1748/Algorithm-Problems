def phoneNumberMnemonics(phoneNumber):
    # create phone hash
    # create a result list
    # call a recursive helper function
    # return result
    keypad = { '1':['1'], '2':['a','b','c'], '3':['d','e','f'], '4':['g','h','i'], '5':['j','k','l'], '6':['m','n','o'], 
              '7':['p','q','r','s'], '8':['t','u','v'], '9':['w','x','y','z'], '0':['0'] } 
    result = []
    findCombinations(phoneNumber, keypad, result, '')
    return result

    
# helper function finds all combinations by recursively calling itself and accesssing hash
def findCombinations(phoneNumber, keypad, result, starter):
    if phoneNumber == '':
        return

    for let in keypad[ phoneNumber[0] ]:
        findCombinations( phoneNumber[1:], keypad, result, starter + let)
        if len( phoneNumber ) == 1:
            result.append( starter + let )
    
