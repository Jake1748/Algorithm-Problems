Write a function that takes in a binary Tree and returns its diameter. The diameter of a binary tree is defined as the length of its longest path, even if that path doesn't pass through the root of the tree.
A path is a collection of connected nodes in a tree, where no node is connected to more than two other nodes. The length of a path is the number of edges bnetween the path's first node and its last node. 
Each BinaryTree node has an integer value, a left, and a right child node. Children nodes can either be BinaryTree nodes themselves or null.

Answer:

class BinaryTree {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

function binaryTreeDiameter(tree) {
  const diameter = { max: -Infinity };
  calculateDiameter( tree, diameter );
  return diameter.max;
}

function calculateDiameter( tree, diameter ) {
  if ( tree === null) return 0;

  const leftDiameter = calculateDiameter(tree.left, diameter);
  const rightDiameter = calculateDiameter(tree.right, diameter)
  
  diameter.max = Math.max( leftDiameter + rightDiameter, diameter.max);
  
  return Math.max( leftDiameter + 1, rightDiameter + 1 );

#Python:

# This is an input class. Do not edit.
class BinaryTree:
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right


def binaryTreeDiameter(tree):
    # base case: null, return 0
    # recurse left
    # recurse right
    # return whichever left or right is bigger + 1
    longestPath = [0]
    calculateDiameter(tree, longestPath)
    return longestPath[0]
    
def calculateDiameter(tree, longestPath):
    if tree == None:
        return 0
    
    left = calculateDiameter(tree.left, longestPath)
    right = calculateDiameter(tree.right, longestPath)
    
    currDiameter = left + right
    longestPath[0] = max( longestPath[0], currDiameter )
    
    return max(left, right) + 1
